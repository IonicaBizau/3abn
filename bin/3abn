#!/usr/bin/env node

"use strict";

const threeABN = require("../lib")
    , Tilda = require("tilda")
    , Logger = require("bug-killer")
    , Diable = require("diable")
    , CliUpdate = require("cli-update")
    , CliBox = require("cli-box")
    , couleurs = require("couleurs")
    , cliResize = require("cli-resize")
    ;

const ASCII_ART = " ________________________________"
              + "\n(                                )"
              + "\n(                   !            )"
              + "\n(     3ABN Radio    |            )"
              + "\n(     Music Channel |    |~/     )"
              + "\n(                   |   _|~      )"
              + "\n(     .============.|  (_|   |~/ )"
              + "\n(   .-;____________;|.      _|~  )"
              + "\n(   | [_________I__] |     (_|   )"
              + "\n(   |  \"\"\"\"\" (_) (_) |           )"
              + "\n(   | .=====..=====. |           )"
              + "\n(   | |:::::||:::::| |           )"
              + "\n(   | '=====''=====' |           )"
              + "\n(   '----------------'           )"
              + "\n(________________________________)\n"
              ;

new Tilda(`${__dirname}/../package.json`, {
    options: [
        {
            opts: ["d", "daemon"]
          , desc: "If provided, the process will run in background."
          , type: Boolean
        }
    ]
}).main(a => {

    if (a.options.daemon.value && !Diable.isDaemon()) {
        Diable({
            exit: false
        });
        return setTimeout(process.exit, 1000);
    }

    let render = () => {
        let content = ""
          , boxOpts = {
                fullscreen: true
            }
          ;

        if (player.songInfo) {
            let playlist = player.songInfo.playlist
              , howManyToShow = CliUpdate.rows - 5;
              ;

            boxOpts.hAlign = "left";
            boxOpts.vAlign = "bottom";
            content = playlist.slice(-howManyToShow).map(c => `${c.date.format("HH:mm")} - ${c.title}`).join("\n");
            content += "\n" + "-".repeat(CliUpdate.columns - 2);
            content += "\n> " + player.songInfo.playing;

            if (playlist.length < CliUpdate.rows) {

                content = "3ABN Radio Music Channel | 3abn.org | Terminal client by @IonicaBizau (twitter.com/IonicaBizau) | ♩ ♪ ♫ ♬ ♪ ♫\n" + ("-".repeat(CliUpdate.columns - 2)) + "\n" + content;
            }
        } else {
            content = ASCII_ART + (player.is_playing ? "Playing": "Connecting") + "...";
        }

        CliUpdate.render(CliBox(boxOpts, content));
    };


    let player = new threeABN()
                  .on("playing", render)
                  .on("song_changed", render)
                  .on("playend", () => Logger.log("Ended.", "warn"))
                  .on("error", err => Logger.log(err, "error"))
                  ;

    render();
    cliResize(render);
});
